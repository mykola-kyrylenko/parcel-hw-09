{"mappings":"AACA,MAAMA,EAAOC,SAASC,cAAc,SA4CpCF,EAAKG,iBAAiB,UA1CtB,SAAsBC,GACpBA,EAAMC,iBAEN,MAAMC,EAAQN,EAAKE,cAAc,kBAC3BK,EAAOP,EAAKE,cAAc,iBAC1BM,EAASR,EAAKE,cAAc,mBAE5BO,EAAS,CACbC,MAAOJ,EAAMK,MACbJ,KAAMA,EAAKI,MACXH,OAAQA,EAAOG,OAGf,SAASC,EAAcC,EAAUH,GAC/B,OAAO,IAAII,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAGtCC,YAAW,KACLH,EAEFF,EAAQF,EAAUH,GAGlBM,EAAOH,EAAUH,KAElBD,EAAOC,UAdhBW,QAAQC,IAAIb,GAkBV,IAAK,IAAIc,EAAI,EAAGA,EAAId,EAAOD,OAAQe,GAAK,EACtCX,EAAcH,EAAOD,OAAQC,EAAOF,MACjCiB,MAAK,EAACX,SAAEA,EAAQH,MAAEA,MACjBW,QAAQC,IAAI,uBAAqBT,QAAiBH,UAEnDe,OAAM,EAACZ,SAAEA,EAAQH,MAAEA,MAClBW,QAAQC,IAAI,sBAAoBT,QAAeH","sources":["src/js/03-promises.js"],"sourcesContent":["// const createPromiseBtn = document.querySelector('button');\nconst form = document.querySelector('.form');\n  \nfunction onFormSubmit(event) {\n  event.preventDefault();\n\n  const delay = form.querySelector('[name=\"delay\"]');\n  const step = form.querySelector('[name=\"step\"]');\n  const amount = form.querySelector('[name=\"amount\"]');\n\n  const values = {\n    delay: delay.value,\n    step: step.value,\n    amount: amount.value\n  };\n  console.log(values);\n    function createPromise(position, delay) {\n      return new Promise((resolve, reject) => {\n        const shouldResolve = Math.random() > 0.3;\n\n\n        setTimeout(() => {\n          if (shouldResolve) {\n            // Fulfill\n            resolve(position, delay);\n          } else {\n            // Reject\n            reject(position, delay);\n          }\n        }, values.delay)\n      });\n  };\n\n    for (let i = 0; i < values.amount; i += 1) {\n      createPromise(values.amount, values.step)\n        .then(({ position, delay }) => {\n          console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        })\n        .catch(({ position, delay }) => {\n          console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        });\n    };\n\n};\n\nform.addEventListener('submit', onFormSubmit);\n\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n    \n    setTimeout(() => {\n      if (shouldResolve) {\n        // Fulfill\n        resolve(position, delay);\n      } else {\n        // Reject\n        reject(position, delay);\n      }\n    }, delay)\n  })\n};\n\n\n\n\n\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","addEventListener","event","preventDefault","delay1","step","amount","values","delay","value","createPromise1","position","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","console","log","i","then","catch"],"version":3,"file":"03-promises.105a3fd1.js.map"}